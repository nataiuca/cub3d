Cosas a hacer:

- cambiar estructura t_img por la t_img de la minilibx (+ adaptar código) (en el subject dice de usar images de la minilibx) ❌
- añadir minimapa ❌


PARSEO:
- creo que el parseo tiene que aceptar espacios entre los valores de los colores ✅ 
- el parseo tiene que aceptar líneas vacías entre las líneas de configuración ✅ 
- creo que no deberia aceptar líneas vacías dentro del mapa ✅ 
- cambiar mensajes de error -> sistematizados desde función msg_error + poner exit status (AHORA MISMO SIEMPRE SE SALE CON EXIT_FAILURE, DA IGUAL) 

raycasting:
- separar bien responsabilidades: el cálculo de los rayos tiene que servir para el minimapa

08.10.25 - 17.30h includes y srcs
Esta versión no compila
Tareas en marcha:
- parseo (directorio parsing):
* que acepte espacios y líneas entre las líneas de configuración de textura y colores y entre sus argumentos
* no tiene que aceptar lineas vacías dentro del mapa
* DÓNDE ESTAMOS: integrando parseo y validación del mapa (mía) con normalización (de natalia) -> puntos críticos: el spliteo de líneas que hago yo, que relleno os espacios de 0s... manejar! ✅ 
* Atenta! A inicialización del player y su orientación... adaptar parseo a la lógica
- cambio de mensajes error - EN PROCESO

Cosas que hay que hacer no empezadas:
- cambiar estructura t_img por la t_img de la minilibx
- No sé si valdría la pena cambiarse a la mlx42
- Entender el raycasting y separar bien responsabilidades: el cálculo de los rayos tiene que servir para el minimapa


09.10.25 - 12h
Esta versión compila pero no ejecuta gráficos:
- normalización de natalia + mi parseo de mapa y configuración, integrado ✅ 
Siguientes paso: 
- integrar bien inicialización de player y su orientación con su uso en gráficos
- sustituir funciones de minilibx por MLX42 + sustituir t_img(es más fácil y hay mucho manejo muy bajo y complicado de las imgs que creo que no hace falta; además se pide en el subject el empleo de imgs de la minilibx)
- minimap: manejar la presencia de espacios

voy a ir poco a poco antes de displayear gráficos


Cómo convertir xpm a xpm42?: python3 ../MLX42/tools/xpm3_conv.py wall_south.xpm 


VALGRIND: 

valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose ./tu_programa

CÓMO SABER SI LOS LEAKS SON DE NUESTRO CÓDIGO O DE LA MLX42:

valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./cub3D maps/map.cub 2> valgrind.log

-> Si la línea menciona usr/lib/.. o libglfw, libX11, libGL, libpthread, libc... Son leaks del sistema o de MLX42
-> Preocuparse de frames que terminan en tu binario, 


src/
│
├── controls/
│   ├── events.c    // handle_keypress() y handle_close()
│
├── engines /
│   ├── collision.c //check_corners(), is_valid_pos()
│   ├── moves.c // rotate_player(), move_right(), move_left()...
│   └── player.c // update_player(), init_player_orientation()
│   └── raycasting.c //cast_all_rays(), calc_wall_dist(), perform_dda(), calc_step_dist(), init_ray()
│
├── graphics /
│   ├── draw_3d.c //get_tex_color(), get_tex_index(), calc_tex_x(), draw_floor_ceiling(), draw_tex_wall(), draw_column(), draw_3d_view()
│   ├── init_mlx.c//init_graphics.c(), load_textures(), load_texture()
│
├── minimap /
│   ├── minimap_cast.c //cast_ray_minimap(), cast_all_rays_minimap(), draw_rays(), draw_line(), 
│   ├── minimap_draw.c//draw_minimap(), draw_minimap_grid(), draw_player(), 
│   └── minimap_utils.c //init_minimap(), draw_square(), get_minimap_cell_color(), clear_minimap() 
│  
├── parsing /
│   ├──config_parser.c //parse_config(), handle_config_line(), extract_texture_path(), extract_color_raw()
│   ├── config_validator.c//validate_config(), validate_texture_path(), validate_color_str(), validate_rgb_values(), rgb_to_int()
|   ├── map_parser.c//parse_map(), count_rows()
|   ├── map_validator.c//validate_map(), check_trailing_rows(), is_map_closed(), normalize_map(), process_map_line(), measure_map(), 
|   ├── parser_utils.c //skip_empty_lines(), is_map_start_line()
│   └── read_file.c //load_info(), read_file(), count_file_lines()
├── utils /
│   ├── cleanup.c //cleanup_game(), free_map(), free_info(), free_str_array()
│   └── error.c //error_msg(), error_exit(), error_cleanup_exit()
└── main.c
└── init_structs.c




